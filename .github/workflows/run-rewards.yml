name: "Run Microsoft Rewards Script (daily random 07-10 ET with jitter)"

on:
  schedule:
    - cron: '0 11 * * *'
    - cron: '0 12 * * *'
    - cron: '0 13 * * *'
    - cron: '0 14 * * *'
    - cron: '0 15 * * *'
  workflow_dispatch: {}

jobs:
  run-rewards:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      NODE_VERSION: '18'

    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v4

      - name: "Setup Node"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Decide whether this scheduled run should execute (slot selection in America/Toronto)"
        shell: bash
        run: |
          LOCAL_DATE=$(TZ='America/Toronto' date +%F)
          LOCAL_HOUR=$(TZ='America/Toronto' date +%H)
          echo "Toronto local date: $LOCAL_DATE  hour: $LOCAL_HOUR"

          HASH=$(printf '%s' "$LOCAL_DATE" | sha256sum | awk '{print $1}')
          LAST_HEX=${HASH: -1}
          SLOT=$((16#$LAST_HEX % 4))
          echo "Slot for today (0..3): $SLOT"

          case "$LOCAL_HOUR" in
            07) EXPECTED=0 ;;
            08) EXPECTED=1 ;;
            09) EXPECTED=2 ;;
            10) EXPECTED=3 ;;
            *) echo "Local hour $LOCAL_HOUR not in 07-10 ET; exiting quickly."; exit 0 ;;
          esac

          echo "Expected slot for this hour: $EXPECTED"
          if [ "$SLOT" -ne "$EXPECTED" ]; then
            echo "Not this hour's chosen run — exiting quickly to save runner time."
            exit 0
          fi

          echo "This job won the day's slot (Toronto time) — continuing."

      - name: "Compute jitter and sleep (winning job)"
        shell: bash
        run: |
          LOCAL_DATE=$(TZ='America/Toronto' date +%F)
          LOCAL_HOUR=$(TZ='America/Toronto' date +%H)
          HASH2=$(printf '%s' "${LOCAL_DATE}${LOCAL_HOUR}" | sha256sum | awk '{print $1}')
          LAST2=${HASH2: -2}
          DEC=$((16#$LAST2))
          JITTER_MIN=$((DEC % 60))
          echo "Sleeping for ${JITTER_MIN} minute(s) (Toronto local jitter)"
          sleep $((JITTER_MIN * 60))

      - name: "Create src/accounts.json from secret"
        shell: bash
        run: |
          mkdir -p src
          if [ -z "${{ secrets.ACCOUNTS_JSON }}" ]; then
            echo "ERROR: ACCOUNTS_JSON secret is empty. Add your src/accounts.json content to the secret named ACCOUNTS_JSON."
            exit 1
          fi
          printf '%s' "${{ secrets.ACCOUNTS_JSON }}" > src/accounts.json
          echo "wrote src/accounts.json - size: $(wc -c < src/accounts.json) bytes"

      - name: "Create src/config.json from secret if provided"
        shell: bash
        run: |
          if [ -n "${{ secrets.CONFIG_JSON }}" ]; then
            printf '%s' "${{ secrets.CONFIG_JSON }}" > src/config.json
            echo "wrote src/config.json - size: $(wc -c < src/config.json) bytes"
          else
            echo "CONFIG_JSON not provided; using repo config.json if present."
          fi

      - name: "Install OS packages required by browsers (Playwright)"
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libnss3 libatk1.0-0 libatk-bridge2.0-0 libcups2 libxss1 libasound2 libxcomposite1 libxdamage1 libxrandr2 libgtk-3-0 libgbm1 ca-certificates fonts-liberation libappindicator3-1 libatspi2.0-0 lsb-release

      - name: "Install Node dependencies (clean)"
        shell: bash
        run: |
          npm ci
          echo "node: $(node -v); npm: $(npm -v)"
          npm ls --depth=0 || true

      - name: "Verify TypeScript / install if missing"
        shell: bash
        run: |
          if ! npx --no-install tsc --version >/dev/null 2>&1; then
            echo "TypeScript missing; installing locally..."
            npm i -D typescript@latest
          else
            echo "TypeScript present."
            npx tsc --version || true
          fi

      - name: "Install Playwright browser(s)"
        shell: bash
        run: |
          npx playwright install --with-deps chromium

      - name: "Build the project (per README)"
        shell: bash
        run: |
          npm run build

      - name: "Run the built script and save logs"
        shell: bash
        run: |
          mkdir -p logs
          npm run start 2>&1 | tee logs/script.log || true
          echo "Captured logs to logs/script.log"

      - name: "Upload logs artifact"
        uses: actions/upload-artifact@v4
        with:
          name: microsoft-rewards-logs-${{ github.run_id }}
          path: logs/script.log
          
