name: "Run Microsoft Rewards Script (randomized start around 08:00 Toronto, EST-only)"

on:
  schedule:
    # 13:00 UTC == 08:00 EST
    - cron: '0 13 * * *'
  workflow_dispatch:
    inputs:
      simulate_schedule:
        description: 'Set to true to simulate schedule behaviour (enable jitter) for manual runs)'
        required: false
        default: 'false'

jobs:
  run-rewards:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      # Use Node 20 to get modern web-APIs (File/FormData/etc.) that undici expects.
      NODE_VERSION: '20'
      SIMULATE_SCHEDULE: ${{ github.event.inputs.simulate_schedule || 'false' }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: "Decide whether this scheduled run should continue (EST-only target: local 08:00)"
        shell: bash
        run: |
          set -euo pipefail
          EVENT_NAME="${GITHUB_EVENT_NAME:-}"
          if [ "$EVENT_NAME" = "workflow_dispatch" ] && [ "${SIMULATE_SCHEDULE:-}" != "true" ]; then
            echo "Manual run requested (no hour check)."
          else
            LOCAL_HOUR=$(TZ='America/Toronto' date +%H | sed 's/^0//')
            if [ "$LOCAL_HOUR" -ne 8 ]; then
              echo "Local hour is not 8 (EST target) — exiting."
              exit 0
            fi
            echo "Local hour is 8 — continuing."
          fi

      - name: "Compute random jitter (0..90 minutes)"
        shell: bash
        run: |
          set -euo pipefail
          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ] && [ "${SIMULATE_SCHEDULE:-}" != "true" ]; then
            echo "Manual run — skipping jitter."
          else
            JITTER_SEC=$(( $(od -An -N4 -tu4 /dev/urandom | tr -d ' ') % (90*60 + 1) ))
            echo "Sleeping $JITTER_SEC seconds (jitter up to 90m)."
            sleep "$JITTER_SEC"
          fi

      - name: "Write src/accounts.json from secret"
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p src
          if [ -n "${{ secrets.ACCOUNTS_JSON_B64 }}" ]; then
            printf '%s' "${{ secrets.ACCOUNTS_JSON_B64 }}" | base64 --decode > src/accounts.json
          elif [ -n "${{ secrets.ACCOUNTS_JSON }}" ]; then
            RAW="${{ secrets.ACCOUNTS_JSON }}"
            case "$RAW" in
              \"*\" ) RAW="${RAW#\"}"; RAW="${RAW%\"}" ;;
              \'*\' ) RAW="${RAW#\'}"; RAW="${RAW%\'}" ;;
            esac
            case "$RAW" in
              [\{[]* ) printf '%s' "$RAW" > src.accounts.json ;;
              * )
                TMP=$(mktemp)
                if printf '%s' "$RAW" | base64 --decode > "$TMP" 2>/dev/null; then
                  mv "$TMP" src.accounts.json
                else
                  echo "ERROR: Invalid ACCOUNTS_JSON"; exit 1
                fi ;;
            esac
          else
            echo "No ACCOUNTS_JSON secret found"; exit 1
          fi
          if command -v jq >/dev/null 2>&1; then
            jq . src/accounts.json >/dev/null || { echo "Invalid JSON"; exit 1; }
          else
            node -e "JSON.parse(require('fs').readFileSync('src/accounts.json','utf8'))" || exit 1
          fi

      - name: "Install Node dependencies (npm ci)"
        run: npm ci --no-audit --no-fund

      - name: "Cache Playwright browser binaries"
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browser-cache-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-browser-cache-${{ runner.os }}-

      - name: "Install Playwright Chromium + OS dependencies"
        shell: bash
        run: |
          set -euo pipefail
          # ensure using local npx and node from setup-node
          npx --yes playwright install --with-deps chromium

      - name: "Build the project"
        run: npm run build

      - name: "Create runtime File polyfill (fallback for older Node runtimes)"
        shell: bash
        run: |
          mkdir -p dist
          cat > dist/polyfill-file.js <<'EOF'
          // Minimal runtime polyfill: define global File if absent.
          if (typeof globalThis.File === 'undefined') {
            globalThis.File = class File extends Blob {
              constructor(parts = [], name = '', options = {}) {
                super(parts, options);
                this.name = String(name);
                this.lastModified = options && options.lastModified ? Number(options.lastModified) : Date.now();
              }
            };
          }
          EOF
          echo "Wrote dist/polyfill-file.js"

      - name: "Run the built script and save logs (preload polyfill)"
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p logs
          node -r ./dist/polyfill-file.js ./dist/index.js 2>&1 | tee logs/script.log || true
          echo "Captured logs to logs/script.log"

      - name: "Sanitize logs"
        shell: bash
        run: |
          set -euo pipefail
          cp logs/script.log logs/script.log.raw || true
          sed -E -i 's/("password"[[:space:]]*:[[:space:]]*)"[^"]*"/\1"***REDACTED***"/Ig' logs.script.log
          sed -E -i 's/([Pp]ass(word)?[[:space:]]*[:=][[:space:]]*)[^[:space:],;]+/\1***REDACTED***/g' logs.script.log
          sed -E -i 's/[^[:space:]]*@gmail\.com/***REDACTED_GMAIL***/g' logs.script.log
          sed -E -i 's/[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}/***REDACTED_EMAIL***/g' logs.script.log
          sed -E -i 's/([Aa]uthorization[[:space:]]*[:=][[:space:]]*(Bearer|Basic)?[[:space:]]*)[^[:space:]]+/\1***REDACTED***/g' logs.script.log
          sed -E -i 's/[A-Za-z0-9+/]{40,}={0,2}/***REDACTED_BASE64***/g' logs.script.log
          sed -E -i 's/("password"[[:space:]]*:[[:space:]]*)"see"/\1"***REDACTED***"/Ig' logs.script.log
          rm -f logs/script.log.raw || true

      - name: "Upload logs"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: microsoft-rewards-logs-${{ github.run_id }}
          path: logs/script.log
