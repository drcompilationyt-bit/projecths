name: Run Microsoft Rewards Script (daily random 07-10 ET with jitter & deps check)

on:
  schedule:
    - cron: '0 11 * * *'
    - cron: '0 12 * * *'
    - cron: '0 13 * * *'
    - cron: '0 14 * * *'
    - cron: '0 15 * * *'
  workflow_dispatch: {}

jobs:
  run-rewards:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      NODE_VERSION: '18'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Decide whether this scheduled run should execute (slot selection in America/Toronto)
        shell: bash
        run: |
          read SLOT HOUR <<'PYOUT'
$(python3 - <<'PY'
from zoneinfo import ZoneInfo
import hashlib, datetime
tz = ZoneInfo('America/Toronto')
now = datetime.datetime.now(tz)
s = now.strftime('%Y-%m-%d')
slot = int(hashlib.sha256(s.encode()).hexdigest(), 16) % 4
hour = now.strftime('%H')
print(f"{slot} {hour}")
PY
)
PYOUT
          echo "Toronto local hour: $HOUR ; slot for today: $SLOT"
          case "$HOUR" in
            07) EXPECTED=0 ;;
            08) EXPECTED=1 ;;
            09) EXPECTED=2 ;;
            10) EXPECTED=3 ;;
            *) echo "Local hour $HOUR not in 07-10 ET; exiting quickly."; exit 0 ;;
          esac
          if [ "$SLOT" -ne "$EXPECTED" ]; then
            echo "Not this hour's chosen run — exiting quickly."
            exit 0
          fi
          echo "This job won the day's slot (Toronto time) — continuing."

      - name: Winning job: compute jitter (0-59 minutes) in Toronto and sleep
        shell: bash
        run: |
          JITTER_MIN=$(python3 - <<'PY'
from zoneinfo import ZoneInfo
import hashlib, datetime
tz = ZoneInfo('America/Toronto')
now = datetime.datetime.now(tz)
s = now.strftime('%Y-%m-%d') + now.strftime('%H')
print(int(hashlib.sha256(s.encode()).hexdigest(), 16) % 60)
PY
)
          echo "Sleeping for $JITTER_MIN minute(s) (Toronto local jitter)."
          sleep $((JITTER_MIN * 60))

      - name: Create src/accounts.json from secret
        shell: bash
        run: |
          mkdir -p src
          if [ -z "${{ secrets.ACCOUNTS_JSON }}" ]; then
            echo "ERROR: ACCOUNTS_JSON secret is empty. Add your src/accounts.json content to the secret named ACCOUNTS_JSON."; exit 1
          fi
          printf '%s' "${{ secrets.ACCOUNTS_JSON }}" > src/accounts.json
          echo "wrote src/accounts.json - size: $(wc -c < src/accounts.json) bytes"

      - name: Optionally create src/config.json from secret (if provided)
        shell: bash
        run: |
          if [ -n "${{ secrets.CONFIG_JSON }}" ]; then
            printf '%s' "${{ secrets.CONFIG_JSON }}" > src/config.json
            echo "wrote src/config.json from secret - size: $(wc -c < src/config.json) bytes"
          else
            echo "CONFIG_JSON secret not provided; using repo's config.json if present."
          fi

      - name: Install OS packages required by browsers (Playwright)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            libnss3 libatk1.0-0 libatk-bridge2.0-0 libcups2 libxss1 \
            libasound2 libxcomposite1 libxdamage1 libxrandr2 libgtk-3-0 libgbm1 \
            ca-certificates fonts-liberation libappindicator3-1 libatspi2.0-0 \
            lsb-release
          echo "Installed common Playwright OS deps."

      - name: Install Node dependencies (clean)
        run: |
          npm ci
          echo "node: $(node -v); npm: $(npm -v)"
          echo "Top-level packages installed:"
          npm ls --depth=0 || true

      - name: Verify TypeScript / build tools present (install if missing)
        shell: bash
        run: |
          # If tsc is not available from local node_modules, install TypeScript as dev dependency and continue.
          if ! npx --no-install tsc --version >/dev/null 2>&1; then
            echo "TypeScript not found. Installing locally as devDependency..."
            npm i -D typescript@latest
            echo "Re-listing packages:"
            npm ls --depth=0 || true
          else
            echo "TypeScript present; ok."
            npx tsc --version || true
          fi

      - name: Install Playwright browser(s)
        run: |
          # installs Chromium with OS deps; adjust if you need webkit/firefox too
          npx playwright install --with-deps chromium

      - name: Build the project (per README)
        run: npm run build

      - name: Run the built script and save logs
        shell: bash
        run: |
          mkdir -p logs
          npm run start 2>&1 | tee logs/script.log || true
          echo "Captured logs to logs/script.log"

      - name: Upload logs artifact
        uses: actions/upload-artifact@v4
        with:
          name: microsoft-rewards-logs-${{ github.run_id }}
          path: logs/script.log
