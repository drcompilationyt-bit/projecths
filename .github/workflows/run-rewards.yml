name: "Run Microsoft Rewards Script (daily random 07-10 ET with jitter)"

on:
  schedule:
    - cron: '0 11 * * *'
    - cron: '0 12 * * *'
    - cron: '0 13 * * *'
    - cron: '0 14 * * *'
    - cron: '0 15 * * *'
  workflow_dispatch: {}

jobs:
  run-rewards:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      NODE_VERSION: '18'

    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v4

      - name: "Setup Node"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Decide whether this scheduled run should execute (slot selection in America/Toronto)"
        shell: bash
        run: |
          LOCAL_DATE=$(TZ='America/Toronto' date +%F)
          LOCAL_HOUR=$(TZ='America/Toronto' date +%H)
          echo "Toronto local date: $LOCAL_DATE  hour: $LOCAL_HOUR"

          HASH=$(printf '%s' "$LOCAL_DATE" | sha256sum | awk '{print $1}')
          LAST_HEX=${HASH: -1}
          SLOT=$((16#$LAST_HEX % 4))
          echo "Slot for today (0..3): $SLOT"

          case "$LOCAL_HOUR" in
            07) EXPECTED=0 ;;
            08) EXPECTED=1 ;;
            09) EXPECTED=2 ;;
            10) EXPECTED=3 ;;
            *) echo "Local hour $LOCAL_HOUR not in 07-10 ET; exiting quickly."; exit 0 ;;
          esac

          echo "Expected slot for this hour: $EXPECTED"
          if [ "$SLOT" -ne "$EXPECTED" ]; then
            echo "Not this hour's chosen run — exiting quickly to save runner time."
            exit 0
          fi

          echo "This job won the day's slot (Toronto time) — continuing."

      - name: "Compute jitter and sleep (winning job)"
        shell: bash
        run: |
          LOCAL_DATE=$(TZ='America/Toronto' date +%F)
          LOCAL_HOUR=$(TZ='America/Toronto' date +%H)
          HASH2=$(printf '%s' "${LOCAL_DATE}${LOCAL_HOUR}" | sha256sum | awk '{print $1}')
          LAST2=${HASH2: -2}
          DEC=$((16#$LAST2))
          JITTER_MIN=$((DEC % 60))
          echo "Sleeping for ${JITTER_MIN} minute(s) (Toronto local jitter)"
          sleep $((JITTER_MIN * 60))

      - name: "Write & validate src/accounts.json (supports base64 or raw secret)"
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p src

          if [ -n "${{ secrets.ACCOUNTS_JSON_B64 }}" ]; then
            echo "Using ACCOUNTS_JSON_B64 (recommended)"
            printf '%s' "${{ secrets.ACCOUNTS_JSON_B64 }}" | base64 --decode > src/accounts.json || { echo "ERROR: base64 decode failed"; exit 1; }
          elif [ -n "${{ secrets.ACCOUNTS_JSON }}" ]; then
            echo "Using raw ACCOUNTS_JSON secret (falling back)"
            RAW="${{ secrets.ACCOUNTS_JSON }}"
            RAW="${RAW#\"}"; RAW="${RAW%\"}"
            RAW="${RAW#\'}"; RAW="${RAW%\'}"
            printf '%s' "$RAW" > src/accounts.json
          else
            echo "ERROR: Neither ACCOUNTS_JSON_B64 nor ACCOUNTS_JSON secret present"
            exit 1
          fi

          echo "wrote src/accounts.json - size: $(wc -c < src/accounts.json) bytes"
          echo "First 3 lines for quick sanity (non-sensitive):"
          sed -n '1,3p' src/accounts.json || true

          if command -v jq >/dev/null 2>&1; then
            jq . src/accounts.json >/dev/null || { echo "Invalid JSON in src/accounts.json (jq parse failed)"; sed -n '1,200p' src/accounts.json; exit 1; }
          else
            node -e "try{JSON.parse(require('fs').readFileSync('src/accounts.json','utf8')); console.log('json ok')}catch(e){console.error('invalid json:', e.message); process.exit(2)}"
          fi

      - name: "Write & validate src/config.json if provided (supports base64 or raw secret)"
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.CONFIG_JSON_B64 }}" ]; then
            echo "Using CONFIG_JSON_B64 (recommended)"
            printf '%s' "${{ secrets.CONFIG_JSON_B64 }}" | base64 --decode > src/config.json || { echo "ERROR: base64 decode for CONFIG_JSON failed"; exit 1; }
            echo "wrote src/config.json - size: $(wc -c < src/config.json) bytes"
            if command -v jq >/dev/null 2>&1; then
              jq . src/config.json >/dev/null || { echo "Invalid JSON in src/config.json (jq parse failed)"; sed -n '1,200p' src/config.json; exit 1; }
            else
              node -e "try{JSON.parse(require('fs').readFileSync('src/config.json','utf8')); console.log('config json ok')}catch(e){console.error('invalid json:', e.message); process.exit(2)}"
            fi
          elif [ -n "${{ secrets.CONFIG_JSON }}" ]; then
            echo "Using raw CONFIG_JSON secret (falling back)"
            RAW="${{ secrets.CONFIG_JSON }}"
            RAW="${RAW#\"}"; RAW="${RAW%\"}"
            RAW="${RAW#\'}"; RAW="${RAW%\'}"
            printf '%s' "$RAW" > src/config.json
            echo "wrote src/config.json - size: $(wc -c < src/config.json) bytes"
            if command -v jq >/dev/null 2>&1; then
              jq . src/config.json >/dev/null || { echo "Invalid JSON in src/config.json (jq parse failed)"; sed -n '1,200p' src/config.json; exit 1; }
            else
              node -e "try{JSON.parse(require('fs').readFileSync('src/config.json','utf8')); console.log('config json ok')}catch(e){console.error('invalid json:', e.message); process.exit(2)}"
            fi
          else
            echo "CONFIG_JSON not provided; using repo config.json if present."
          fi

      - name: "Install OS packages required by browsers (Playwright) (robust)"
        shell: bash
        run: |
          set -euo pipefail

          echo "Updating apt..."
          sudo apt-get update -y

          BASE_PKGS="libnss3 libatk1.0-0 libatk-bridge2.0-0 libcups2 libxss1 libxcomposite1 libxdamage1 libxrandr2 libgtk-3-0 libgbm1 ca-certificates fonts-liberation libappindicator3-1 libatspi2.0-0 lsb-release"

          echo "Attempting to install system packages (with libasound2 fallback logic)..."
          if sudo apt-get install -y $BASE_PKGS libasound2; then
            echo "Installed with libasound2"
          else
            echo "libasound2 not available, trying libasound2t64..."
            if sudo apt-get install -y $BASE_PKGS libasound2t64; then
              echo "Installed with libasound2t64"
            else
              echo "libasound2t64 not available, trying liboss4-salsa-asound2..."
              if sudo apt-get install -y $BASE_PKGS liboss4-salsa-asound2; then
                echo "Installed with liboss4-salsa-asound2"
              else
                echo "Failed to install any libasound provider; printing apt-cache policy for debugging"
                apt-cache policy libasound2 libasound2t64 liboss4-salsa-asound2 || true
                exit 1
              fi
            fi
          fi

      - name: "Install Node dependencies (clean)"
        shell: bash
        run: |
          npm ci
          echo "node: $(node -v); npm: $(npm -v)"
          npm ls --depth=0 || true

      - name: "Verify TypeScript / install if missing"
        shell: bash
        run: |
          if ! npx --no-install tsc --version >/dev/null 2>&1; then
            echo "TypeScript missing; installing locally..."
            npm i -D typescript@latest
          else
            echo "TypeScript present."
            npx tsc --version || true
          fi

      - name: "Ensure tsconfig excludes runtime-only JSON files (src/accounts.json)"
        shell: bash
        run: |
          set -euo pipefail
          if [ -f tsconfig.json ]; then
            node <<'NODE'
const fs = require('fs'), p = 'tsconfig.json';
let cfg = JSON.parse(fs.readFileSync(p, 'utf8'));
if (!Array.isArray(cfg.exclude)) cfg.exclude = [];
if (!cfg.exclude.includes('src/accounts.json')) {
  cfg.exclude.push('src/accounts.json');
  fs.writeFileSync(p, JSON.stringify(cfg, null, 2) + '\n');
  console.log('Added src/accounts.json to tsconfig.json exclude');
} else {
  console.log('tsconfig.json already excludes src/accounts.json');
}
NODE
          else
            echo "No tsconfig.json found; skipping tsconfig patch."
          fi

      - name: "Optional: Run tsc --noEmit as a quick pre-check"
        shell: bash
        run: |
          if npx --no-install tsc --version >/dev/null 2>&1; then
            echo "Running tsc --noEmit to check compilation (excludes should be in effect)..."
            npx tsc --noEmit || { echo "tsc failed; see output"; exit 1; }
          else
            echo "TypeScript not installed yet; installing temporarily for check..."
            npm i -D typescript@latest
            npx tsc --noEmit || { echo "tsc failed; see output"; exit 1; }
          fi

      - name: "Install Playwright OS deps helper (optional) and browsers"
        shell: bash
        run: |
          if command -v npx >/dev/null 2>&1; then
            echo "Running npx playwright install-deps (may require sudo)..."
            npx playwright install-deps || true
          fi

          echo "Installing Playwright Chromium (with deps)..."
          npx playwright install --with-deps chromium

      - name: "Build the project (per README)"
        shell: bash
        run: |
          npm run build

      - name: "Run the built script and save logs"
        shell: bash
        run: |
          mkdir -p logs
          npm run start 2>&1 | tee logs/script.log || true
          echo "Captured logs to logs/script.log"

      - name: "Upload logs artifact"
        uses: actions/upload-artifact@v4
        with:
          name: microsoft-rewards-logs-${{ github.run_id }}
          path: logs/script.log
